/*
 * I2C_8bit.c
 *
 *  Created on: 2017Äê8ÔÂ23ÈÕ
 *      Author: Administrator
 */

#include "I2C_8bit.h"

#define DeviceId	XPAR_PS7_I2C_0_DEVICE_ID
#define IIC_SCLK_RATE	40000
#define Config_done	0xff

XIicPs	Iic;

struct config_table	ov_7725_config_table[]={
		{0x12,0x80},		// BIT[7]-Reset all the Reg


			//Bingo Init REV
			//Write Data Index
		{0x1c, 0x7f},
		{0x1d, 0xa2},
		{0x12, 0x80},
		{0x3d, 0x03},	//DC offset for analog process
		{0x15, 0x00},	//COM10: href/vsync/pclk/data reverse(Vsync H valid)
		{0x17, 0x22},	//VGA:	0x22;	QVGA:	0x3f;
		{0x18, 0xa4},	//VGA:	0xa4;	QVGA:	0x50;
		{0x19, 0x07},	//VGA:	0x07;	QVGA:	0x03;
		{0x1a, 0xf0},	//VGA:	0xf0;	QVGA:	0x78;
		{0x32, 0x00},	//Bit[7]:Mirror image edge alignment
		{0x29, 0xA0},	//VGA:	0xA0;	QVGA:	0xF0
		{0x2C, 0xF6},	//VGA:	0xF0;	QVGA:	0x78
		{0x0d, 0x41},	//PLL 4x
			//sccb_senddata(0x2a, 0x00},	//PLL 4x
		{0x11, 0x00},	//CLKRC,Finternal clock = Finput clk*PLL multiplier/[(CLKRC[5:0]+1)*2] = 25MHz*4/[(x+1)*2]
																	//00: 50fps, 01:25fps, 03:12.5fps	(50Hz Fliter)
		{0x12, 0x06},	//BIT[6]:	0:VGA; 1;QVGA
																	//VGA:	00:YUV; 01:Processed Bayer RGB; 10:RGB;	11:Bayer RAW; BIT[7]-Reset all the Reg
		{0x0c, 0xd0},	//COM3: Bit[6]:Horizontal mirror image ON/OFF, Bit[0]:Color bar; Default:0x10
			//DSP control
		{0x42, 0x7f},	//BLC Blue Channel Target Value, Default: 0x80
		{0x4d, 0x09},	//BLC Red Channel Target Value, Default: 0x80
		{0x63, 0xf0},	//AWB Control
		{0x64, 0xff},	//DSP_Ctrl1:
		{0x65, 0x00},	//DSP_Ctrl2:
		{0x66, 0x00},	//{COM3[4](0x0C), DSP_Ctrl3[7]}:00:YUYV;	01:YVYU;	[10:UYVY]	11:VYUY
		{0x67, 0x00},	//DSP_Ctrl4:[1:0]00/01: YUV or RGB; 10: RAW8; 11: RAW10

		  //AGC AEC AWB
		{0x13, 0xff},
		{0x0f, 0xc5},
		{0x14, 0x11},
		{0x22, 0x98},	//Banding Filt er Minimum AEC Value; Default: 0x09
		{0x23, 0x03},	//Banding Filter Maximum Step
		{0x24, 0x40},	//AGC/AEC - Stable Operating Region (Upper Limit)
		{0x25, 0x30},	//AGC/AEC - Stable Operating Region (Lower Limit)
		{0x26, 0xa1},	//AGC/AEC Fast Mode Operating Region
		{0x2b, 0x00},	//TaiWan: 0x00:60Hz Filter; Mainland: 0x9e:50Hz Filter
		{0x6b, 0xaa},	//AWB Control 3
		{0x13, 0xff},	//0xff: AGC AEC AWB Enable; 0xf0: AGC AEC AWB Disable;


			//sccb_senddata(0x0d, 0x41}, //20141206

			//matrix sharpness brightness contrast UV
		{0x90, 0x0a},
		{0x91, 0x01},
		{0x92, 0x01},
		{0x93, 0x01},
		{0x94, 0x5f},
		{0x95, 0x53},
		{0x96, 0x11},
		{0x97, 0x1a},
		{0x98, 0x3d},
		{0x99, 0x5a},
		{0x9a, 0x1e},
		{0x9b, 0x3f},	//Brightness
		{0x9c, 0x25},
		{0x9e, 0x81},
		{0xa6, 0x06},
		{0xa7, 0x65},
		{0xa8, 0x65},
		{0xa9, 0x80},
		{0xaa, 0x80},

			//Gamma correction
		{0x7e, 0x0c},
		{0x7f, 0x16},	//
		{0x80, 0x2a},
		{0x81, 0x4e},
		{0x82, 0x61},
		{0x83, 0x6f},
		{0x84, 0x7b},
		{0x85, 0x86},
		{0x86, 0x8e},
		{0x87, 0x97},
		{0x88, 0xa4},
		{0x89, 0xaf},
		{0x8a, 0xc5},
		{0x8b, 0xd7},
		{0x8c, 0xe8},
		{0x8d, 0x20},
			//sccb_senddata(0x1c, 0x7f},//20141206
		{0x0e, 0x65},//20141206
	{Config_done,0x00}
};

int iic_init(void)
{
	int Status;
	XIicPs_Config *Config;

	/*
	 * Initialize the IIC driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XIicPs_LookupConfig(DeviceId);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIicPs_CfgInitialize(&Iic, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the IIC serial clock rate.
	 */
	XIicPs_SetSClk(&Iic, IIC_SCLK_RATE);

	return XST_SUCCESS;

}

int I2C_write_byte(XIicPs *InstancePtr,u8 sensor_slave_addr,void *write_byte,int byte_num)
{
	int Status;

	Status = XIicPs_MasterSendPolled(InstancePtr, write_byte, byte_num,sensor_slave_addr);

	if(Status != XST_SUCCESS){
		xil_printf("IIC Send byte Failed!");
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(InstancePtr));

	return XST_SUCCESS;
}

int I2C_read_byte(XIicPs *InstancePtr,u8 sensor_slave_addr,void *write_byte,int byte_num)
{
	int Status;

	Status = XIicPs_MasterRecvPolled(InstancePtr, write_byte, byte_num,sensor_slave_addr);

	if(Status != XST_SUCCESS){
		xil_printf("IIC Read byte Failed!");
	}

	/*
	 * Wait until bus is idle to start another transfer.
	 */
	while (XIicPs_BusIsBusy(InstancePtr));

	return XST_SUCCESS;
}

int I2C_read(XIicPs *InstancePtr,u8 addr,u8 *read_buf)
{
	if(I2C_write_byte(InstancePtr,OV_CAM,addr,1) != XST_SUCCESS)
		xil_printf("IIC Read ADDR Failed!");
	if(I2C_read_byte(InstancePtr,OV_CAM,read_buf,1) != XST_SUCCESS)
		xil_printf("IIC Read data Failed!");
	return XST_SUCCESS;
}

int I2C_write(XIicPs *InstancePtr,u8 addr,u8 data)
{
	u8 buf[2];
	buf[0] = addr;
	buf[1] = data;
	if(I2C_write_byte(InstancePtr,OV_CAM,buf,2) != XST_SUCCESS)
		xil_printf("IIC Write bytes Failed");
	return XST_SUCCESS;
}

int I2C_config_init(void)
{
	int Status;
	int i=0;

	Status	= iic_init();
	if(Status != XST_SUCCESS)
	{
		xil_printf("I2C init Failed!");
	}

	while(ov_7725_config_table[i].addr != Config_done)
	{
		I2C_write(&Iic,ov_7725_config_table[i].addr,ov_7725_config_table[i].data);
		i++;
	}



	return XST_SUCCESS;
}
